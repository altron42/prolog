/******************************************************
							TALK Program
******************************************************/

/*=====================================================
							Operators
=====================================================*/

:- op(500,xfy,&).
:- op(510,xfy,=>).
:- op(100,fx,‘).

/*=====================================================

						Dialogue Manager

=====================================================*/

%%% main_loop
%%% =========

main_loop :-
	write(’>> ’),				% prompt the user
	read_sent(Words),			% read a sentence
	talk(Words, Reply), 		% process it with TALK
	print_reply(Reply), 		% generate a printed reply
	main_loop.					% pocess more sentences

%%% talk(Sentence, Reply)
%%% =====================
%%%
%%%		Sentence ==> sentence to form a reply to
%%%		Reply		<== appropriate reply to the sentence

talk(Sentence, Reply) :-
	% parse the sentence
	parse(Sentence, LF, Type),
	% convert the FOL logical form into a Horn
	% clause, if possible
	clausify(LF, Clause, FreeVars), !,
	% concoct a reply, based on the clause and
	% whether sentence was a query or assertion
	reply(Type, FreeVars, Clause, Reply).

% No parse was found, sentence is too difficult.
talk(_Sentence, error(’too difficult’)).


%%% reply(Type, FreeVars, Clause, Reply)
%%% ====================================
%%%
%%%	Type		==>	the constant "query" or "assertion"
%%%						depending on whether clause should
%%%						be interpreted as a query or
%%%						assertion
%%%	FreeVars ==>	the free variables (to be
%%%						interpreted existentially) in the
%%%						clause
%%%	Clause	==>	the clause being replied to
%%%	Reply		<== 	the reply
%%%
%%%	If the clause is interpreted as an assertion,
%%%	the predicate has a side effect of asserting
%%%	the clause to the database.

% Replying to a query.
reply(query, FreeVars,
		(answer(Answer):-Condition), Reply) :-
	% find all the answers that satisfy the query,
	% replying with that set if it exists, or "no"
	% or "none" if it doesn’t.
	(setof(Answer, FreeVarsˆCondition, Answers)
		-> Reply = answer(Answers)
		; (Answer = []
			-> Reply = answer([none])
			; Reply = answer([no]))), !.

% Replying to an assertion.
reply(assertion, _FreeVars,
		Assertion, asserted(Assertion)) :-
	% assert the assertion and tell user what we asserted
	assert(Assertion), !.

% Replying to some other type of sentence.
reply(_Type, _FreeVars, _Clause, error(’unknown type’)).

%%% print_reply(Reply)
%%% ==================
%%%
%%%	Reply		==> 	reply generated by reply predicate
%%%						that is to be printed to the
%%%						standard output.

print_reply(error(ErrorType)) :-
	write(’Error: "’), write(ErrorType), write(’."’), nl.

print_reply(asserted(Assertion)) :-
	write(’Asserted "’), write(Assertion), write(’."’), nl.

print_reply(answer(Answers)) :-
	print_answers(Answers).
